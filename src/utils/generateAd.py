# sample program generated by bedrock hosted LLM edited to to take inputs
# change this as needed like passing the array of headline, ad_copy, cta, ad_image_in
# to generate multiple combinations of the ads in one shot
import os
from PIL import Image, ImageDraw, ImageFont

def generate_ad_image(headline, ad_copy, cta, image, brand = None):
    # change below as needed
    path="assets"
    # ad_image_in = f"{path}/generated_images/generated_image.png"
    ad_image_in = image
    ad_image_out = f"{path}/generated_ads/generated_ad.png"

    # Define the dimensions and background color
    width, height = 720, 1000
    bg_color = (255, 255, 255)  # White background

    # Create a new image
    ad = Image.new('RGB', (width, height), bg_color)

    # Load fonts
    # change this as needed
    font_path = '/System/Library/Fonts/NewYork.ttf'  # Replace with the actual font file path

    headline_font = ImageFont.truetype(font_path, 36)
    body_font = ImageFont.truetype(font_path, 24)   
    cta_font = ImageFont.truetype(font_path, 20)

    # Create a drawing object
    draw = ImageDraw.Draw(ad)

    # Draw the headline
    # change this as needed
    headline_width, headline_height = draw.textbbox((0, 0), headline, font=headline_font)[2:]
    headline_x = (width - headline_width) / 2
    headline_y = 50
    draw.text((headline_x, headline_y), headline, font=headline_font, fill=(0, 0, 0))

    # Draw the ad copy
    # change this as needed
    ad_copy_width, ad_copy_height = draw.textbbox((0, 0), ad_copy, font=body_font)[2:]
    ad_copy_x = (width - ad_copy_width) / 2
    ad_copy_y = headline_y + headline_height + 30
    draw.text((ad_copy_x, ad_copy_y), ad_copy, font=body_font, fill=(0, 0, 0))

    # Draw the call to action
    # change this as needed
    cta_width, cta_height = draw.textbbox((0, 0), cta, font=cta_font)[2:]
    cta_x = (width - cta_width) / 2
    cta_y = height - cta_height - 50
    draw.text((cta_x, cta_y), cta, font=cta_font, fill=(0, 0, 0))

    # Open the imagery
    imagery = Image.open(ad_image_in)

    # Resize the imagery to fit the ad
    imagery_width, imagery_height = imagery.size
    aspect_ratio = imagery_width / imagery_height
    new_height = int(width / aspect_ratio)
    imagery = imagery.resize((width, new_height))

    # Paste the imagery onto the ad
    imagery_x = 0
    imagery_y = ad_copy_y + ad_copy_height + 30
    ad.paste(imagery, (imagery_x, imagery_y))

    # Save the ad
    # change this as needed
    ad.save(ad_image_out)